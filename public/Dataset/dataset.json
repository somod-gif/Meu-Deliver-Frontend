// All RESPONSE data are format like below
// NOTE
// NOTE
// NOTE
// NOTE
{
  "success": true/false,
  "message": "Message is follow",
  "data": [
    "this is where the value goes, only Auth routes doest not follow this setup",
    "smaple",
    {
      "name": "Premium Coffee Beans",
      "description": "Arabica coffee beans from Ethiopia",
      "categoryId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
      "price": 12.99,
      "stockQuantity": 100,
      "imageUrl": "https://example.com/coffee.jpg"
    },
  ],
  "pagenation": {
    //for list reponse, pagenation is use to avoid data flooding
    "total": 10,
    "page": 1,
    "limit": 25,
    "totalPages": 1
  }s
}


1.User Registration (POST /api/auth/register)

Request:
json

{
  "name": "John Doe",
  "email": "john@example.com",
  "phone": "1234567890",
  "password": "securePassword123",
  "role": "CLIENT"
}

Response:
json

{
  "id": "550e8400-e29b-41d4-a716-446655440000",
  "name": "John Doe",
  "email": "john@example.com",
  "phone": "1234567890",
  "role": "CLIENT",
  "isActive": true,
  "createdAt": "2023-05-15T10:00:00Z"
}

2. User Login (POST /api/auth/login)

Request:
json

{
  "email": "john@example.com",
  "password": "securePassword123"
}

Response:
json

{
  "user": {
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "name": "John Doe",
    "email": "john@example.com",
    "role": "CLIENT",
    "profileImage": null
  }
}

Products
3. Create Product (POST /api/products) - Vendor Only

Request:
json

{
  "name": "Premium Coffee Beans",
  "description": "Arabica coffee beans from Ethiopia",
  "categoryId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
  "price": 12.99,
  "stockQuantity": 100,
  "imageUrl": "https://example.com/coffee.jpg"
}

Response:
json

{
  "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
  "name": "Premium Coffee Beans",
  "description": "Arabica coffee beans from Ethiopia",
  "vendorId": "550e8400-e29b-41d4-a716-446655440000",
  "categoryId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
  "price": 12.99,
  "stockQuantity": 100,
  "isAvailable": true,
  "imageUrl": "https://example.com/coffee.jpg",
  "createdAt": "2023-05-15T10:15:00Z"
}

Orders
4. Create Order (POST /api/orders)

Request:
json

{
  "items": [
    {
      "productId": "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
      "quantity": 2
    }
  ],
  "paymentMethod": "CARD",
  "deliveryAddress": {
    "street": "123 Main St",
    "city": "Luanda",
    "province": "Luanda",
    "postalCode": "12345",
    "country": "Angola"
  }
}

Response:
json

{
  "id": "1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed",
  "userId": "550e8400-e29b-41d4-a716-446655440000",
  "status": "PENDING",
  "totalAmount": 25.98,
  "paymentStatus": "UNPAID",
  "paymentMethod": "CARD",
  "deliveryFee": 2.50,
  "createdAt": "2023-05-15T10:30:00Z",
  "items": [
    {
      "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c9",
      "productName": "Premium Coffee Beans",
      "quantity": 2,
      "unitPrice": 12.99,
      "totalPrice": 25.98
    }
  ]
}

Wallet
5. Add Funds to Wallet (POST /api/wallet/fund)

Request:
json

{
  "amount": 50.00,
  "paymentMethod": "CARD"
}

Response:
json

{
  "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c7",
  "walletId": "6ba7b810-9dad-11d1-80b4-00c04fd430c6",
  "type": "CREDIT",
  "amount": 50.00,
  "status": "PENDING",
  "referenceId": "PAY-123456789",
  "createdAt": "2023-05-15T10:45:00Z"
}

Cart
6. Add to Cart (POST /api/cart)

Request:
json

{
  "productId": "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
  "quantity": 1
}

Response:
json

{
  "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c5",
  "userId": "550e8400-e29b-41d4-a716-446655440000",
  "productId": "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
  "quantity": 1,
  "createdAt": "2023-05-15T11:00:00Z",
  "product": {
    "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
    "name": "Premium Coffee Beans",
    "price": 12.99,
    "imageUrl": "https://example.com/coffee.jpg"
  }
}

Notifications
7. Get User Notifications (GET /api/notifications)

Response:
json

[
  {
    "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c4",
    "type": "IN_APP",
    "title": "Order Confirmed",
    "message": "Your order #12345 has been confirmed",
    "isRead": false,
    "createdAt": "2023-05-15T09:30:00Z",
    "payload": {
      "orderId": "1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed"
    }
  }
]

Vendor
8. Vendor Registration (POST /api/vendors/register)

Request:
json

{
  "userId": "550e8400-e29b-41d4-a716-446655440000",
  "businessName": "Coffee Haven",
  "street": "456 Vendor St",
  "city": "Luanda",
  "country": "Angola",
  "description": "Premium coffee shop"
}

Response:
json

{
  "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c3",
  "userId": "550e8400-e29b-41d4-a716-446655440000",
  "businessName": "Coffee Haven",
  "street": "456 Vendor St",
  "city": "Luanda",
  "country": "Angola",
  "verified": false,
  "description": "Premium coffee shop",
  "ratingAverage": 0,
  "ratingCount": 0,
  "createdAt": "2023-05-15T11:15:00Z"
}

Delivery Agent
9. Update Delivery Agent Location (POST /api/delivery/location)

Request:
json

{
  "latitude": -8.8383,
  "longitude": 13.2344,
  "available": true
}

Response:
json

{
  "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c2",
  "userId": "550e8400-e29b-41d4-a716-446655440001",
  "vehicleType": "Motorcycle",
  "available": true,
  "locationLat": -8.8383,
  "locationLng": 13.2344,
  "updatedAt": "2023-05-15T11:30:00Z"
}

Error Responses

All endpoints can return errors in this format:
json

{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Invalid input data",
    "details": {
      "email": "Email is required",
      "password": "Password must be at least 8 characters"
    }
  }
}